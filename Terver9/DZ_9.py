import numpy as np
from sklearn.linear_model import LinearRegression
'''
Задача 1.
Даны значения величины заработной платы заемщиков банка (zp) и значения их поведенческого кредитного скоринга (ks):
zp = [35, 45, 190, 200, 40, 70, 54, 150, 120, 110], ks = [401, 574, 874, 919, 459, 739, 653, 902, 746, 832].
Используя математические операции, посчитать коэффициенты линейной регрессии, приняв за X заработную плату
(то есть, zp - признак), а за y - значения скорингового балла (то есть, ks - целевая переменная).
Произвести расчет как с использованием intercept, так и без.
'''
x = np.array([35, 45, 190, 200, 40, 70, 54, 150, 120, 110])
y = np.array([401, 574, 874, 919, 459, 739, 653, 902, 746, 832])
b1 = (np.mean(x * y) - np.mean(x) * np.mean(y)) / (np.mean(x**2) - np.mean(x)**2)
b0 = np.mean(y) - b1 * np.mean(x)
y_pred = b0 + b1 * x
print('Задача 1.')
print(f'b0 = {b0}, b1 = {b1}')
model = LinearRegression()
x = x.reshape(-1, 1)
model.fit(x, y)
print(f'с использованием intercept - bo = {model.intercept_}, b1 = {model.coef_[0]}')

'''
Задача 2.
Посчитать коэффициент линейной регрессии при заработной плате (zp), используя градиентный спуск (без intercept).
'''
x = np.array([35, 45, 190, 200, 40, 70, 54, 150, 120, 110])
y = np.array([401, 574, 874, 919, 459, 739, 653, 902, 746, 832])
def mse(b1, y = y, x = x, n = len(x)):
    return np.sum((b1 * x - y)**2) / n
a = 1e-6
b1 = 0.1
while True:
    mse_last = mse(b1)
    b1 -= a * (2/len(x)) * np.sum((b1 * x - y) * x)
    if abs(mse(b1) - mse_last) < 1e-6: break
print('Задача 2.')
print(f'b1 = {b1}')
'''
Задача 3.
(Дополнительно). Произвести вычисления как в пункте 2, но с вычислением intercept.
Учесть, что изменение коэффициентов должно производиться на каждом шаге одновременно 
(то есть изменение одного коэффициента не должно влиять на изменение другого во время одной итерации).
'''
x = np.array([35, 45, 190, 200, 40, 70, 54, 150, 120, 110])
y = np.array([401, 574, 874, 919, 459, 739, 653, 902, 746, 832])
def mse(b0,b1, y = y, x = x, n = len(x)):
    return np.sum((b0 + b1 * x - y)**2) / n
a = 1e-5*7
b0, b1 = 0, 0
print('Задача 3.')
print('Считаю пару минут...')
while True:
    mse_last = mse(b0, b1)
    b0 -= a * (2/len(x)) * np.sum(b0 + b1 * x - y)
    b1 -= a * (2/len(x)) * np.sum((b0 + b1 * x - y) * x)
    if abs(mse(b0, b1) - mse_last) < 1e-6: break
print(f'b0 = {b0}, b1 = {b1}')